// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Seed {
  id        Int      @id @default(autoincrement())
  seed      String   @db.VarChar(255)
  createdAt DateTime @default(now())
}

enum UserRole {
  GUEST
  USER
  ADMIN
}

model User {
  id               BigInt    @id @default(autoincrement())
  role             UserRole  @default(GUEST)
  email            String    @unique @db.VarChar(255)
  emailActivatedAt DateTime?
  firstName        String?   @db.VarChar(255)
  lastName         String?   @db.VarChar(255)
  phone            String?   @db.VarChar(16)
  passwordHash     String    @db.VarChar(72) // bcrypt
  loggedAt         DateTime?
  imageId          BigInt?

  isSim   Boolean @default(false)
  isClean Boolean @default(false)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  Image Image? @relation(fields: [imageId], references: [id])
  Jwt   Jwt[]

  @@index([deletedAt])
  @@index([isClean])
  @@index([isSim])
}

enum JwtType {
  USER_AUTH
  USER_ACTIVATION
  USER_RECOVERY
}

model Jwt {
  id           BigInt   @id @default(autoincrement())
  type         JwtType
  uid          String   @unique @db.VarChar(32)
  expirationAt DateTime
  userId       BigInt?
  meta         Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  User User? @relation(fields: [userId], references: [id])

  @@unique([type, uid])
}

model Setting {
  id    BigInt @id @default(autoincrement())
  name  String @unique @db.VarChar(512)
  value Json   @db.Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskType {
  SEND_EMAIL
}

model Task {
  id       BigInt   @id @default(autoincrement())
  type     TaskType @default(SEND_EMAIL)
  data     Json     @db.Json
  attempts Int      @default(0) @db.SmallInt

  forNodeUid  String?   @db.VarChar(32)
  isActive    Boolean   @default(false)
  isFail      Boolean   @default(false)
  lastStartAt DateTime?
  failAt      DateTime?
  errorText   String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([isActive])
}

enum ImageStorage {
  LocalFile
}

model Image {
  id          BigInt       @id @default(autoincrement())
  storage     ImageStorage
  localFileId BigInt?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LocalFile LocalFile? @relation(fields: [localFileId], references: [id])
  Users     User[]
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model LocalFile {
  id          BigInt @id @default(autoincrement())
  sha256      String @db.VarChar(64)
  mime        String @db.VarChar(255) // mime type
  size        Int // bytes size
  width       Int? // for image or video width
  height      Int? // for image or video height
  durationSec Int? // for video or audio
  pathToFile  String @db.VarChar(255)

  type     MediaType
  isThumb  Boolean   @default(false)
  isBanned Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Images        Image[]
  ThumbsAsOrg   LocalFileThumb[] @relation("OrgLocalFile")
  ThumbsAsThumb LocalFileThumb[] @relation("ThumbLocalFile")

  @@index([sha256])
}

model LocalFileThumb {
  id               BigInt @id @default(autoincrement())
  orgLocalFileId   BigInt
  thumbLocalFileId BigInt
  thumbName        String @db.VarChar(32)

  OrgLocalFile   LocalFile @relation("OrgLocalFile", fields: [orgLocalFileId], references: [id])
  ThumbLocalFile LocalFile @relation("ThumbLocalFile", fields: [thumbLocalFileId], references: [id])

  @@unique([orgLocalFileId, thumbName])
  @@index([thumbLocalFileId])
}
